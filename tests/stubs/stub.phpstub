<?php

declare(strict_types=1);
/**
 * @copyright Copyright (c) 2021 Robin Appelman <robin@icewind.nl>
 *
 * @license GNU AGPL version 3 or any later version
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

namespace OC\Files {
	class Filesystem {
		public static function addStorageWrapper(string $wrapperName, callable $wrapper, int $priority = 50) {
		}
	}
}

namespace OC\Core\Command {
	use Symfony\Component\Console\Command\Command;

	class Base  extends Command {
	}
}

namespace OC\Files\Storage {
	use OCP\Files\Storage\IStorage;
	use OCP\IUser;

	class Home implements IStorage {
		public function __construct($parameters) {
		}

		public function getId() {
			throw new \Exception('stub');
		}

		public function mkdir($path) {
			throw new \Exception('stub');
		}

		public function rmdir($path) {
			throw new \Exception('stub');
		}

		public function opendir($path) {
			throw new \Exception('stub');
		}

		public function is_dir($path) {
			throw new \Exception('stub');
		}

		public function is_file($path) {
			throw new \Exception('stub');
		}

		public function stat($path) {
			throw new \Exception('stub');
		}

		public function filetype($path) {
			throw new \Exception('stub');
		}

		public function filesize($path) {
			throw new \Exception('stub');
		}

		public function isCreatable($path) {
			throw new \Exception('stub');
		}

		public function isReadable($path) {
			throw new \Exception('stub');
		}

		public function isUpdatable($path) {
			throw new \Exception('stub');
		}

		public function isDeletable($path) {
			throw new \Exception('stub');
		}

		public function isSharable($path) {
			throw new \Exception('stub');
		}

		public function getPermissions($path) {
			throw new \Exception('stub');
		}

		public function file_exists($path) {
			throw new \Exception('stub');
		}

		public function filemtime($path) {
			throw new \Exception('stub');
		}

		public function file_get_contents($path) {
			throw new \Exception('stub');
		}

		public function file_put_contents($path, $data) {
			throw new \Exception('stub');
		}

		public function unlink($path) {
			throw new \Exception('stub');
		}

		public function rename($path1, $path2) {
			throw new \Exception('stub');
		}

		public function copy($path1, $path2) {
			throw new \Exception('stub');
		}

		public function fopen($path, $mode) {
			throw new \Exception('stub');
		}

		public function getMimeType($path) {
			throw new \Exception('stub');
		}

		public function hash($type, $path, $raw = false) {
			throw new \Exception('stub');
		}

		public function free_space($path) {
			throw new \Exception('stub');
		}

		public function touch($path, $mtime = null) {
			throw new \Exception('stub');
		}

		public function getLocalFile($path) {
			throw new \Exception('stub');
		}

		public function hasUpdated($path, $time) {
			throw new \Exception('stub');
		}

		public function getETag($path) {
			throw new \Exception('stub');
		}

		public function isLocal() {
			throw new \Exception('stub');
		}

		public function instanceOfStorage($class) {
			throw new \Exception('stub');
		}

		public function getDirectDownload($path) {
			throw new \Exception('stub');
		}

		public function verifyPath($path, $fileName) {
			throw new \Exception('stub');
		}

		public function copyFromStorage(IStorage $sourceStorage, $sourceInternalPath, $targetInternalPath) {
			throw new \Exception('stub');
		}

		public function moveFromStorage(IStorage $sourceStorage, $sourceInternalPath, $targetInternalPath) {
			throw new \Exception('stub');
		}

		public function test() {
			throw new \Exception('stub');
		}

		public function getAvailability() {
			throw new \Exception('stub');
		}

		public function setAvailability($isAvailable) {
			throw new \Exception('stub');
		}

		public function getOwner($path) {
			throw new \Exception('stub');
		}

		public function getCache() {
			throw new \Exception('stub');
		}

		public function getPropagator() {
			throw new \Exception('stub');
		}

		public function getScanner() {
			throw new \Exception('stub');
		}

		public function getUpdater() {
			throw new \Exception('stub');
		}

		public function getWatcher() {
			throw new \Exception('stub');
		}

		public function getUser(): ?IUser {
			throw new \Exception('stub');
		}
	}
}

namespace {
	class OC_Helper {
		public static function computerFileSize(string $size): int {
			throw new \Exception('stub');
		}

		public static function humanFileSize(int $size): string {
			throw new \Exception('stub');
		}
	}
}

namespace OC\Files\Storage\Wrapper{

	use OCP\Files\Cache\ICache;
	use OCP\Files\Cache\ICacheEntry;
	use OCP\Files\Search\ISearchQuery;
	use OCP\Files\Storage\IStorage;

	class CacheWrapper implements IStorage {
		public function __construct(array $parameters) {
		}

		public function getId() {
			throw new \Exception('stub');
		}

		public function mkdir($path) {
			throw new \Exception('stub');
		}

		public function rmdir($path) {
			throw new \Exception('stub');
		}

		public function opendir($path) {
			throw new \Exception('stub');
		}

		public function is_dir($path) {
			throw new \Exception('stub');
		}

		public function is_file($path) {
			throw new \Exception('stub');
		}

		public function stat($path) {
			throw new \Exception('stub');
		}

		public function filetype($path) {
			throw new \Exception('stub');
		}

		public function filesize($path) {
			throw new \Exception('stub');
		}

		public function isCreatable($path) {
			throw new \Exception('stub');
		}

		public function isReadable($path) {
			throw new \Exception('stub');
		}

		public function isUpdatable($path) {
			throw new \Exception('stub');
		}

		public function isDeletable($path) {
			throw new \Exception('stub');
		}

		public function isSharable($path) {
			throw new \Exception('stub');
		}

		public function getPermissions($path) {
			throw new \Exception('stub');
		}

		public function file_exists($path) {
			throw new \Exception('stub');
		}

		public function filemtime($path) {
			throw new \Exception('stub');
		}

		public function file_get_contents($path) {
			throw new \Exception('stub');
		}

		public function file_put_contents($path, $data) {
			throw new \Exception('stub');
		}

		public function unlink($path) {
			throw new \Exception('stub');
		}

		public function rename($path1, $path2) {
			throw new \Exception('stub');
		}

		public function copy($path1, $path2) {
			throw new \Exception('stub');
		}

		public function fopen($path, $mode) {
			throw new \Exception('stub');
		}

		public function getMimeType($path) {
			throw new \Exception('stub');
		}

		public function hash($type, $path, $raw = false) {
			throw new \Exception('stub');
		}

		public function free_space($path) {
			throw new \Exception('stub');
		}

		public function touch($path, $mtime = null) {
			throw new \Exception('stub');
		}

		public function getLocalFile($path) {
			throw new \Exception('stub');
		}

		public function hasUpdated($path, $time) {
			throw new \Exception('stub');
		}

		public function getETag($path) {
			throw new \Exception('stub');
		}

		public function isLocal() {
			throw new \Exception('stub');
		}

		public function instanceOfStorage($class) {
			throw new \Exception('stub');
		}

		public function getDirectDownload($path) {
			throw new \Exception('stub');
		}

		public function verifyPath($path, $fileName) {
			throw new \Exception('stub');
		}

		public function copyFromStorage(IStorage $sourceStorage, $sourceInternalPath, $targetInternalPath) {
			throw new \Exception('stub');
		}

		public function moveFromStorage(IStorage $sourceStorage, $sourceInternalPath, $targetInternalPath) {
			throw new \Exception('stub');
		}

		public function test() {
			throw new \Exception('stub');
		}

		public function getAvailability() {
			throw new \Exception('stub');
		}

		public function setAvailability($isAvailable) {
			throw new \Exception('stub');
		}

		public function getOwner($path) {
			throw new \Exception('stub');
		}

		public function getCache() {
			throw new \Exception('stub');
		}

		public function getPropagator() {
			throw new \Exception('stub');
		}

		public function getScanner() {
			throw new \Exception('stub');
		}

		public function getUpdater() {
			throw new \Exception('stub');
		}

		public function getWatcher() {
			throw new \Exception('stub');
		}

		public function setOwner(?string $user): void {
			throw new \Exception('stub');
		}
	}

	class Quota extends CacheWrapper {
		/**
		 * @var int $quota
		 */
		protected $quota;

		/**
		 * @var string $sizeRoot
		 */
		protected $sizeRoot;
	}
}

namespace OC\Files\Cache\Wrapper {

	use OCP\Files\Cache\ICache;
	use OCP\Files\Cache\ICacheEntry;
	use OCP\Files\Search\ISearchOperator;
	use OCP\Files\Search\ISearchQuery;

	class CacheWrapper implements ICache {
		public function __construct(ICache $cache) {
		}

		public function getNumericStorageId() {
			throw new \Exception('stub');
		}

		public function get($file) {
			throw new \Exception('stub');
		}

		public function getFolderContents($folder) {
			throw new \Exception('stub');
		}

		public function getFolderContentsById($fileId) {
			throw new \Exception('stub');
		}

		public function put($file, array $data) {
			throw new \Exception('stub');
		}

		public function insert($file, array $data) {
			throw new \Exception('stub');
		}

		public function update($id, array $data) {
			throw new \Exception('stub');
		}

		public function getId($file) {
			throw new \Exception('stub');
		}

		public function getParentId($file) {
			throw new \Exception('stub');
		}

		public function inCache($file) {
			throw new \Exception('stub');
		}

		public function remove($file) {
			throw new \Exception('stub');
		}

		public function move($source, $target) {
			throw new \Exception('stub');
		}

		public function moveFromCache(ICache $sourceCache, $sourcePath, $targetPath) {
			throw new \Exception('stub');
		}

		public function getStatus($file) {
			throw new \Exception('stub');
		}

		public function search($pattern) {
			throw new \Exception('stub');
		}

		public function searchByMime($mimetype) {
			throw new \Exception('stub');
		}

		public function searchQuery(ISearchQuery $query) {
			throw new \Exception('stub');
		}

		public function getIncomplete() {
			throw new \Exception('stub');
		}

		public function getPathById($id) {
			throw new \Exception('stub');
		}

		public function normalize($path) {
			throw new \Exception('stub');
		}

		public function copyFromCache(ICache $sourceCache, ICacheEntry $sourceEntry, string $targetPath): int {
			throw new \Exception('stub');
		}

		public function getQueryFilterForStorage(): ISearchOperator {
			throw new \Exception('stub');
		}

		public function getCacheEntryFromSearchResult(ICacheEntry $rawEntry): ?ICacheEntry {
			throw new \Exception('stub');
		}
	}
}
